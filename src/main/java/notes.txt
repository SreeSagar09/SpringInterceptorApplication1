A Simple Program to show how to configure Interceptor in Spring Application with HandlerInterceptorAdapter class:
Programs:
* AppConfig.java
* AppInit.java
* ActionHandlerController.java
* ActionHandlerInterceptor.java
Notes:
* The HandlerInterceptorAdapter abstract class for the AsyncHandlerInterceptor interface.
* The HandlerInterceptorAdapter is sub class of AsyncHandlerInterceptor interface.
* By extending HandlerInterceptorAdapter class four methods are inherited from it's super classes, those are below:
* default boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception
* This preHandle method can execute before the execution of handler.
* default void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable ModelAndView modelAndView) throws Exception
* This postHandle method can execute after successful execution of handler.
* default void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, @Nullable Exception ex) throws Exception
* This afterCompletion method can execute after completion of request processing, after rendering the view.
* default void afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception
* This afterConcurrentHandlingStarted method can execute when handler is executing concurrently.
* The @Component annotation is not required for Spring(Non-Spring boot) applications.
Output:
From preHandle method in ActionHandlerInterceptor class
From actionHandler1 method in ActionHandlerController class
From postHandle method in ActionHandlerInterceptor class
From afterCompletion method in ActionHandlerInterceptor class
